// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory-am/fosite/handler/oidc (interfaces: OpenIDConnectRequestStorage)

package internal

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of OpenIDConnectRequestStorage interface
type MockOpenIDConnectRequestStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockOpenIDConnectRequestStorageRecorder
}

// Recorder for MockOpenIDConnectRequestStorage (not exported)
type _MockOpenIDConnectRequestStorageRecorder struct {
	mock *MockOpenIDConnectRequestStorage
}

func NewMockOpenIDConnectRequestStorage(ctrl *gomock.Controller) *MockOpenIDConnectRequestStorage {
	mock := &MockOpenIDConnectRequestStorage{ctrl: ctrl}
	mock.recorder = &_MockOpenIDConnectRequestStorageRecorder{mock}
	return mock
}

func (_m *MockOpenIDConnectRequestStorage) EXPECT() *_MockOpenIDConnectRequestStorageRecorder {
	return _m.recorder
}

func (_m *MockOpenIDConnectRequestStorage) CreateOpenIDConnectSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "CreateOpenIDConnectSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOpenIDConnectRequestStorageRecorder) CreateOpenIDConnectSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOpenIDConnectSession", arg0)
}

func (_m *MockOpenIDConnectRequestStorage) DeleteOpenIDConnectSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteOpenIDConnectSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOpenIDConnectRequestStorageRecorder) DeleteOpenIDConnectSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOpenIDConnectSession", arg0)
}

func (_m *MockOpenIDConnectRequestStorage) IsOpenIDConnectSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "IsOpenIDConnectSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOpenIDConnectRequestStorageRecorder) IsOpenIDConnectSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsOpenIDConnectSession", arg0)
}
