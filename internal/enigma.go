// Automatically generated by MockGen. DO NOT EDIT!
// Source: enigma.go

package internal

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/ory-am/fosite/enigma"
)

// Mock of Enigma interface
type MockEnigma struct {
	ctrl     *gomock.Controller
	recorder *_MockEnigmaRecorder
}

// Recorder for MockEnigma (not exported)
type _MockEnigmaRecorder struct {
	mock *MockEnigma
}

func NewMockEnigma(ctrl *gomock.Controller) *MockEnigma {
	mock := &MockEnigma{ctrl: ctrl}
	mock.recorder = &_MockEnigmaRecorder{mock}
	return mock
}

func (_m *MockEnigma) EXPECT() *_MockEnigmaRecorder {
	return _m.recorder
}

func (_m *MockEnigma) GenerateChallenge(secret []byte) (*Challenge, error) {
	ret := _m.ctrl.Call(_m, "GenerateChallenge", secret)
	ret0, _ := ret[0].(*Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEnigmaRecorder) GenerateChallenge(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateChallenge", arg0)
}

func (_m *MockEnigma) ValidateChallenge(secret []byte, challenge *Challenge) error {
	ret := _m.ctrl.Call(_m, "ValidateChallenge", secret, challenge)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEnigmaRecorder) ValidateChallenge(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateChallenge", arg0, arg1)
}
