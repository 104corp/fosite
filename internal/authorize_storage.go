// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ory-am/fosite/handler/authorize (interfaces: AuthorizeStorage)

package internal

import (
	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory-am/fosite"
	authorize "github.com/ory-am/fosite/handler/authorize"
	token "github.com/ory-am/fosite/handler/token"
)

// Mock of AuthorizeStorage interface
type MockAuthorizeStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockAuthorizeStorageRecorder
}

// Recorder for MockAuthorizeStorage (not exported)
type _MockAuthorizeStorageRecorder struct {
	mock *MockAuthorizeStorage
}

func NewMockAuthorizeStorage(ctrl *gomock.Controller) *MockAuthorizeStorage {
	mock := &MockAuthorizeStorage{ctrl: ctrl}
	mock.recorder = &_MockAuthorizeStorageRecorder{mock}
	return mock
}

func (_m *MockAuthorizeStorage) EXPECT() *_MockAuthorizeStorageRecorder {
	return _m.recorder
}

func (_m *MockAuthorizeStorage) CreateAccessTokenSession(_param0 string, _param1 fosite.AccessRequester, _param2 *token.TokenSession) error {
	ret := _m.ctrl.Call(_m, "CreateAccessTokenSession", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) CreateAccessTokenSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccessTokenSession", arg0, arg1, arg2)
}

func (_m *MockAuthorizeStorage) CreateAuthorizeCodeSession(_param0 string, _param1 fosite.AuthorizeRequester, _param2 *authorize.AuthorizeSession) error {
	ret := _m.ctrl.Call(_m, "CreateAuthorizeCodeSession", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) CreateAuthorizeCodeSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAuthorizeCodeSession", arg0, arg1, arg2)
}

func (_m *MockAuthorizeStorage) CreateRefreshTokenSession(_param0 string, _param1 fosite.AccessRequester, _param2 *token.TokenSession) error {
	ret := _m.ctrl.Call(_m, "CreateRefreshTokenSession", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) CreateRefreshTokenSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRefreshTokenSession", arg0, arg1, arg2)
}

func (_m *MockAuthorizeStorage) DeleteAccessTokenSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteAccessTokenSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) DeleteAccessTokenSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccessTokenSession", arg0)
}

func (_m *MockAuthorizeStorage) DeleteAuthorizeCodeSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteAuthorizeCodeSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) DeleteAuthorizeCodeSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAuthorizeCodeSession", arg0)
}

func (_m *MockAuthorizeStorage) DeleteRefreshTokenSession(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteRefreshTokenSession", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizeStorageRecorder) DeleteRefreshTokenSession(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRefreshTokenSession", arg0)
}

func (_m *MockAuthorizeStorage) GetAccessTokenSession(_param0 string, _param1 *token.TokenSession) (fosite.AccessRequester, error) {
	ret := _m.ctrl.Call(_m, "GetAccessTokenSession", _param0, _param1)
	ret0, _ := ret[0].(fosite.AccessRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthorizeStorageRecorder) GetAccessTokenSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccessTokenSession", arg0, arg1)
}

func (_m *MockAuthorizeStorage) GetAuthorizeCodeSession(_param0 string, _param1 *authorize.AuthorizeSession) (fosite.AuthorizeRequester, error) {
	ret := _m.ctrl.Call(_m, "GetAuthorizeCodeSession", _param0, _param1)
	ret0, _ := ret[0].(fosite.AuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthorizeStorageRecorder) GetAuthorizeCodeSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthorizeCodeSession", arg0, arg1)
}

func (_m *MockAuthorizeStorage) GetRefreshTokenSession(_param0 string, _param1 *token.TokenSession) (fosite.AccessRequester, error) {
	ret := _m.ctrl.Call(_m, "GetRefreshTokenSession", _param0, _param1)
	ret0, _ := ret[0].(fosite.AccessRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthorizeStorageRecorder) GetRefreshTokenSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRefreshTokenSession", arg0, arg1)
}
